; ModuleID = '/home/nacho/Documentos/LLVM/_build/course2/ex/test/Output/crc32.c.tmp.ll'
source_filename = "/home/nacho/Documentos/LLVM/course2/ex/test/crc32.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [19 x i8] c"Usage: %s message\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"0x%04x-%s\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %argc, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %1 = load i8*, i8** %argv, align 8, !tbaa !2
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8* %1) #2
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 1
  %2 = load i8*, i8** %arrayidx1, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %cmp23.i = icmp eq i8 %3, 0
  br i1 %cmp23.i, label %crc32.exit, label %while.body.i

while.body.i:                                     ; preds = %if.end, %while.body.i
  %indvars.iv.i = phi i64 [ %Result906, %while.body.i ], [ 0, %if.end ]
  %4 = phi i8 [ %37, %while.body.i ], [ %3, %if.end ]
  %crc.024.i = phi i32 [ %xor8.7.i, %while.body.i ], [ -1, %if.end ]
  %conv.i = zext i8 %4 to i32
  %xor.i = xor i32 %crc.024.i, %conv.i
  %5 = sub nsw i32 0, %conv.i
  %XAndY396 = shl nuw nsw i32 %conv.i, 1
  %shift1397 = and i32 %XAndY396, 2
  %XXorY398 = xor i32 %conv.i, 1
  %XAndY1126 = and i32 %shift1397, %conv.i
  %shift11127 = shl nuw nsw i32 %XAndY1126, 1
  %XXorY1128 = xor i32 %XXorY398, %shift1397
  %Result1129 = add nuw nsw i32 %shift11127, %XXorY1128
  %XAndY404 = and i32 %Result1129, %5
  %shift1405 = shl nuw nsw i32 %XAndY404, 1
  %XXorY406 = xor i32 %Result1129, %5
  %XAndY687 = and i32 %shift1405, %XXorY406
  %shift1688 = shl i32 %XAndY687, 1
  %XXorY689 = xor i32 %shift1405, %XXorY406
  %Result690 = add i32 %shift1688, %XXorY689
  %and.i = and i32 %Result690, %xor.i
  %6 = sub i32 0, %xor.i
  %XAndY33 = and i32 %xor.i, %6
  %shift134 = shl i32 %XAndY33, 1
  %XXorY35 = xor i32 %xor.i, %6
  %XAndY1294 = and i32 %shift134, %XXorY35
  %shift11295 = shl i32 %XAndY1294, 1
  %XXorY1296 = xor i32 %shift134, %XXorY35
  %Result1297 = add i32 %shift11295, %XXorY1296
  %sub.i = sub nsw i32 %Result1297, %and.i
  %XAndY276 = shl i32 %xor.i, 1
  %shift1277 = and i32 %XAndY276, 2
  %XXorY278 = xor i32 %xor.i, 1
  %XAndY863 = and i32 %shift1277, %xor.i
  %shift1864 = shl nuw nsw i32 %XAndY863, 1
  %XXorY865 = xor i32 %XXorY278, %shift1277
  %Result866 = add i32 %shift1864, %XXorY865
  %XAndY284 = and i32 %Result866, %6
  %shift1285 = shl i32 %XAndY284, 1
  %XXorY286 = xor i32 %Result866, %6
  %XAndY632 = and i32 %shift1285, %XXorY286
  %shift1633 = shl i32 %XAndY632, 1
  %XXorY634 = xor i32 %shift1285, %XXorY286
  %Result635 = add i32 %shift1633, %XXorY634
  %shr.i = lshr i32 %xor.i, %Result635
  %shift1337 = and i32 %XAndY396, 64
  %XXorY338 = xor i32 %conv.i, -306674912
  %XAndY1182 = and i32 %shift1337, %conv.i
  %shift11183 = shl nuw nsw i32 %XAndY1182, 1
  %XXorY1184 = xor i32 %XXorY338, %shift1337
  %Result1185 = add nsw i32 %shift11183, %XXorY1184
  %XAndY344 = and i32 %Result1185, %5
  %shift1345 = shl nsw i32 %XAndY344, 1
  %XXorY346 = xor i32 %Result1185, %5
  %XAndY592 = and i32 %shift1345, %XXorY346
  %shift1593 = shl i32 %XAndY592, 1
  %XXorY594 = xor i32 %shift1345, %XXorY346
  %Result595 = add i32 %shift1593, %XXorY594
  %and7.i = and i32 %sub.i, %Result595
  %xor8.i = xor i32 %and7.i, %shr.i
  %and.1.i = and i32 %shr.i, 1
  %sub.1.i = sub nsw i32 %Result1297, %and.1.i
  %shr.1.i = lshr i32 %xor8.i, 1
  %and7.1.i = and i32 %sub.1.i, -306674912
  %xor8.1.i = xor i32 %shr.1.i, %and7.1.i
  %7 = sub i32 0, %crc.024.i
  %XAndY181 = shl i32 %crc.024.i, 1
  %shift1182 = and i32 %XAndY181, 2
  %XXorY183 = xor i32 %crc.024.i, 1
  %XAndY811 = and i32 %shift1182, %crc.024.i
  %shift1812 = shl nuw nsw i32 %XAndY811, 1
  %XXorY813 = xor i32 %shift1182, %XXorY183
  %Result814 = add i32 %shift1812, %XXorY813
  %XAndY189 = and i32 %Result814, %7
  %shift1190 = shl i32 %XAndY189, 1
  %XXorY191 = xor i32 %Result814, %7
  %XAndY827 = and i32 %shift1190, %XXorY191
  %shift1828 = shl i32 %XAndY827, 1
  %XXorY829 = xor i32 %shift1190, %XXorY191
  %Result830 = add i32 %shift1828, %XXorY829
  %and.2.i = and i32 %shr.1.i, %Result830
  %8 = sub i32 0, %shift134
  %shift158 = shl i32 %XAndY33, 2
  %XXorY59 = xor i32 %shift134, %8
  %XAndY1274 = and i32 %XXorY59, %shift158
  %shift11275 = shl i32 %XAndY1274, 1
  %XXorY1276 = xor i32 %XXorY59, %shift158
  %Result1277 = add i32 %shift11275, %XXorY1276
  %sub.2.i = sub nsw i32 %Result1277, %and.2.i
  %9 = sub i32 0, %XXorY183
  %XAndY408 = shl i32 %XXorY183, 1
  %shift1409 = and i32 %XAndY408, 2
  %XAndY488 = and i32 %shift1409, %crc.024.i
  %shift1489 = shl nuw nsw i32 %XAndY488, 1
  %XXorY490 = xor i32 %shift1409, %crc.024.i
  %Result491 = add i32 %shift1489, %XXorY490
  %XAndY416 = and i32 %Result491, %9
  %shift1417 = shl i32 %XAndY416, 1
  %XXorY418 = xor i32 %Result491, %9
  %XAndY1162 = and i32 %shift1417, %XXorY418
  %shift11163 = shl i32 %XAndY1162, 1
  %XXorY1164 = xor i32 %shift1417, %XXorY418
  %Result1165 = add i32 %shift11163, %XXorY1164
  %shr.2.i = lshr i32 %xor8.1.i, %Result1165
  %XAndY61 = and i32 %8, -306674912
  %shift162 = shl i32 %XAndY61, 1
  %XXorY63 = xor i32 %8, -306674912
  %XAndY1022 = and i32 %shift162, %XXorY63
  %shift11023 = shl i32 %XAndY1022, 1
  %XXorY1024 = xor i32 %shift162, %XXorY63
  %Result1025 = add i32 %shift11023, %XXorY1024
  %XAndY69 = and i32 %Result1025, %shift134
  %shift170 = shl i32 %XAndY69, 1
  %XXorY71 = xor i32 %Result1025, %shift134
  %XAndY1026 = and i32 %shift170, %XXorY71
  %shift11027 = shl i32 %XAndY1026, 1
  %XXorY1028 = xor i32 %shift170, %XXorY71
  %Result1029 = add i32 %shift11027, %XXorY1028
  %and7.2.i = and i32 %sub.2.i, %Result1029
  %xor8.2.i = xor i32 %and7.2.i, %shr.2.i
  %XXorY4221298 = or i32 %shift134, 1
  %XXorY430 = xor i32 %XXorY4221298, %8
  %XAndY636 = and i32 %XXorY430, %shift158
  %shift1637 = shl i32 %XAndY636, 1
  %XXorY638 = xor i32 %XXorY430, %shift158
  %Result639 = add i32 %shift1637, %XXorY638
  %and.3.i = and i32 %shr.2.i, %Result639
  %sub.3.i = sub nsw i32 %Result1297, %and.3.i
  %10 = sub i32 0, %shift158
  %XXorY2541299 = or i32 %shift158, 1
  %shift1261 = shl i32 %XAndY33, 3
  %XXorY262 = xor i32 %XXorY2541299, %10
  %XAndY942 = and i32 %XXorY262, %shift1261
  %shift1943 = shl i32 %XAndY942, 1
  %XXorY944 = xor i32 %XXorY262, %shift1261
  %Result945 = add i32 %shift1943, %XXorY944
  %shr.3.i = lshr i32 %xor8.2.i, %Result945
  %XAndY217 = shl i32 %6, 1
  %shift1218 = and i32 %XAndY217, -613349824
  %XXorY219 = xor i32 %6, -306674912
  %XAndY1146 = and i32 %shift1218, %XXorY219
  %shift11147 = shl i32 %XAndY1146, 1
  %XXorY1148 = xor i32 %shift1218, %XXorY219
  %Result1149 = add i32 %shift11147, %XXorY1148
  %XAndY225 = and i32 %Result1149, %xor.i
  %shift1226 = shl i32 %XAndY225, 1
  %XXorY227 = xor i32 %Result1149, %xor.i
  %XAndY572 = and i32 %shift1226, %XXorY227
  %shift1573 = shl i32 %XAndY572, 1
  %XXorY574 = xor i32 %shift1226, %XXorY227
  %Result575 = add i32 %shift1573, %XXorY574
  %and7.3.i = and i32 %sub.3.i, %Result575
  %xor8.3.i = xor i32 %and7.3.i, %shr.3.i
  %and.4.i = and i32 %shr.3.i, %Result639
  %11 = sub i32 0, %xor8.2.i
  %XAndY45 = and i32 %xor8.2.i, %11
  %shift146 = shl i32 %XAndY45, 1
  %XXorY47 = xor i32 %xor8.2.i, %11
  %XAndY512 = and i32 %shift146, %XXorY47
  %shift1513 = shl i32 %XAndY512, 1
  %XXorY514 = xor i32 %shift146, %XXorY47
  %Result515 = sub i32 %XXorY514, %and.4.i
  %sub.4.i = add i32 %Result515, %shift1513
  %12 = sub i32 0, %xor8.1.i
  %shift1134 = and i32 %xor8.i, 2
  %XAndY1222 = and i32 %shift1134, %shr.1.i
  %shift11223 = shl nuw nsw i32 %XAndY1222, 1
  %XXorY1351303 = or i32 %shift1134, 1
  %XXorY1224 = xor i32 %XXorY1351303, %xor8.1.i
  %Result1225 = add i32 %XXorY1224, %shift11223
  %XAndY141 = and i32 %Result1225, %12
  %shift1142 = shl i32 %XAndY141, 1
  %XXorY143 = xor i32 %Result1225, %12
  %XAndY867 = and i32 %shift1142, %XXorY143
  %shift1868 = shl i32 %XAndY867, 1
  %XXorY869 = xor i32 %shift1142, %XXorY143
  %Result870 = add i32 %shift1868, %XXorY869
  %shr.4.i = lshr i32 %xor8.3.i, %Result870
  %XAndY193 = shl i32 %12, 1
  %shift1194 = and i32 %XAndY193, -613349824
  %XXorY195 = xor i32 %12, -306674912
  %XAndY1210 = and i32 %shift1194, %XXorY195
  %shift11211 = shl i32 %XAndY1210, 1
  %XXorY1212 = xor i32 %shift1194, %XXorY195
  %Result1213 = add i32 %shift11211, %XXorY1212
  %XAndY201 = and i32 %Result1213, %xor8.1.i
  %shift1202 = shl i32 %XAndY201, 1
  %XXorY203 = xor i32 %Result1213, %xor8.1.i
  %XAndY871 = and i32 %shift1202, %XXorY203
  %shift1872 = shl i32 %XAndY871, 1
  %XXorY873 = xor i32 %shift1202, %XXorY203
  %Result874 = add i32 %shift1872, %XXorY873
  %and7.4.i = and i32 %Result874, %sub.4.i
  %xor8.4.i = xor i32 %and7.4.i, %shr.4.i
  %and.5.i = and i32 %shr.4.i, 1
  %13 = insertelement <2 x i32> undef, i32 %shr.4.i, i32 0
  %14 = insertelement <2 x i32> %13, i32 %Result1277, i32 1
  %15 = sub <2 x i32> zeroinitializer, %14
  %XAndY240 = shl i32 %shr.4.i, 1
  %shift1241 = and i32 %XAndY240, -613349824
  %XXorY242 = xor i32 %shr.4.i, -306674912
  %XAndY1166 = and i32 %shift1241, %XXorY242
  %shift11167 = shl i32 %XAndY1166, 1
  %XXorY1168 = xor i32 %shift1241, %XXorY242
  %Result1169 = add i32 %shift11167, %XXorY1168
  %16 = insertelement <2 x i32> undef, i32 %Result1169, i32 0
  %17 = insertelement <2 x i32> %16, i32 %Result1277, i32 1
  %18 = and <2 x i32> %17, %15
  %19 = shl <2 x i32> %18, <i32 1, i32 1>
  %20 = xor <2 x i32> %17, %15
  %21 = and <2 x i32> %19, %20
  %22 = shl <2 x i32> %21, <i32 1, i32 1>
  %23 = xor <2 x i32> %19, %20
  %24 = add <2 x i32> %22, %23
  %25 = extractelement <2 x i32> %24, i32 1
  %sub.5.i = sub i32 %25, %and.5.i
  %shr.5.i = lshr i32 %xor8.4.i, 1
  %26 = extractelement <2 x i32> %24, i32 0
  %and7.5.i = and i32 %26, %sub.5.i
  %xor8.5.i = xor i32 %and7.5.i, %shr.5.i
  %27 = sub i32 0, %and.3.i
  %XAndY121 = shl i32 %and.3.i, 1
  %shift1122 = and i32 %XAndY121, 2
  %XXorY123 = xor i32 %and.3.i, 1
  %XAndY751 = and i32 %shift1122, %and.3.i
  %shift1752 = shl nuw nsw i32 %XAndY751, 1
  %XXorY753 = xor i32 %XXorY123, %shift1122
  %Result754 = add i32 %shift1752, %XXorY753
  %XAndY129 = and i32 %Result754, %27
  %shift1130 = shl i32 %XAndY129, 1
  %XXorY131 = xor i32 %Result754, %27
  %XAndY966 = and i32 %shift1130, %XXorY131
  %shift1967 = shl i32 %XAndY966, 1
  %XXorY968 = xor i32 %shift1130, %XXorY131
  %Result969 = add i32 %shift1967, %XXorY968
  %and.6.i = and i32 %shr.5.i, %Result969
  %sub.6.i = sub nsw i32 %Result1297, %and.6.i
  %shr.6.i = lshr i32 %xor8.5.i, 1
  %shift12 = and i32 %XAndY121, -613349824
  %XXorY3 = xor i32 %and.3.i, -306674912
  %XAndY1170 = and i32 %shift12, %XXorY3
  %shift11171 = shl i32 %XAndY1170, 1
  %XXorY1172 = xor i32 %shift12, %XXorY3
  %Result1173 = add i32 %shift11171, %XXorY1172
  %XAndY9 = and i32 %Result1173, %27
  %shift110 = shl i32 %XAndY9, 1
  %XXorY11 = xor i32 %Result1173, %27
  %XAndY795 = and i32 %shift110, %XXorY11
  %shift1796 = shl i32 %XAndY795, 1
  %XXorY797 = xor i32 %shift110, %XXorY11
  %Result798 = add i32 %shift1796, %XXorY797
  %and7.6.i = and i32 %sub.6.i, %Result798
  %xor8.6.i = xor i32 %shr.6.i, %and7.6.i
  %XAndY348 = shl i32 %7, 1
  %shift1349 = and i32 %XAndY348, 2
  %XXorY350 = xor i32 %7, 1
  %XAndY831 = and i32 %shift1349, %7
  %shift1832 = shl nuw nsw i32 %XAndY831, 1
  %XXorY833 = xor i32 %XXorY350, %shift1349
  %Result834 = add i32 %shift1832, %XXorY833
  %XAndY356 = and i32 %Result834, %crc.024.i
  %shift1357 = shl i32 %XAndY356, 1
  %XXorY358 = xor i32 %Result834, %crc.024.i
  %XAndY484 = and i32 %shift1357, %XXorY358
  %shift1485 = shl i32 %XAndY484, 1
  %XXorY486 = xor i32 %shift1357, %XXorY358
  %Result487 = add i32 %shift1485, %XXorY486
  %and.7.i = and i32 %shr.6.i, %Result487
  %28 = sub i32 0, %XAndY61
  %XAndY308 = and i32 %XAndY61, %28
  %shift1309 = shl i32 %XAndY308, 1
  %XXorY310 = xor i32 %XAndY61, %28
  %XAndY1154 = and i32 %shift1309, %XXorY310
  %shift11155 = shl i32 %XAndY1154, 1
  %XXorY1156 = xor i32 %shift1309, %XXorY310
  %Result1157 = add i32 %shift11155, %XXorY1156
  %sub.7.i = sub i32 %Result1157, %and.7.i
  %29 = sub i32 0, %and7.5.i
  %XAndY13 = shl i32 %and7.5.i, 1
  %shift114 = and i32 %XAndY13, 2
  %XXorY15 = xor i32 %and7.5.i, 1
  %XAndY839 = and i32 %shift114, %and7.5.i
  %shift1840 = shl nuw nsw i32 %XAndY839, 1
  %XXorY841 = xor i32 %XXorY15, %shift114
  %Result842 = add i32 %shift1840, %XXorY841
  %XAndY21 = and i32 %Result842, %29
  %shift122 = shl i32 %XAndY21, 1
  %XXorY23 = xor i32 %Result842, %29
  %XAndY759 = and i32 %shift122, %XXorY23
  %shift1760 = shl i32 %XAndY759, 1
  %XXorY761 = xor i32 %shift122, %XXorY23
  %Result762 = add i32 %shift1760, %XXorY761
  %shr.7.i = lshr i32 %xor8.6.i, %Result762
  %XAndY288 = shl i32 %xor8.2.i, 1
  %shift1289 = and i32 %XAndY288, -613349824
  %XXorY290 = xor i32 %xor8.2.i, -306674912
  %XAndY1186 = and i32 %shift1289, %XXorY290
  %shift11187 = shl i32 %XAndY1186, 1
  %XXorY1188 = xor i32 %shift1289, %XXorY290
  %Result1189 = add i32 %shift11187, %XXorY1188
  %XAndY296 = and i32 %Result1189, %11
  %shift1297 = shl i32 %XAndY296, 1
  %XXorY298 = xor i32 %Result1189, %11
  %XAndY807 = and i32 %shift1297, %XXorY298
  %shift1808 = shl i32 %XAndY807, 1
  %XXorY809 = xor i32 %shift1297, %XXorY298
  %Result810 = add i32 %shift1808, %XXorY809
  %and7.7.i = and i32 %sub.7.i, %Result810
  %xor8.7.i = xor i32 %shr.7.i, %and7.7.i
  %30 = zext i32 %and.5.i to i64
  %31 = sub nsw i64 0, %30
  %32 = shl nuw nsw i32 %and.5.i, 1
  %33 = or i32 %32, %and.5.i
  %34 = xor i32 %33, 1
  %XXorY5341301 = zext i32 %34 to i64
  %XAndY380 = and i64 %XXorY5341301, %31
  %shift1381 = shl nuw nsw i64 %XAndY380, 1
  %XXorY382 = xor i64 %XXorY5341301, %31
  %XAndY536 = and i64 %shift1381, %XXorY382
  %shift1537 = shl nuw nsw i64 %XAndY536, 1
  %XXorY538 = xor i64 %shift1381, %XXorY382
  %Result539 = add nsw i64 %shift1537, %XXorY538
  %XAndY = and i64 %Result539, %indvars.iv.i
  %shift1 = shl i64 %XAndY, 1
  %35 = zext i32 %shift146 to i64
  %36 = sub nsw i64 0, %35
  %XXorY1111302 = or i64 %35, 1
  %shift1118 = shl nuw nsw i64 %35, 1
  %XXorY119 = xor i64 %XXorY1111302, %36
  %XAndY1206 = and i64 %XXorY119, %shift1118
  %shift11207 = shl nuw nsw i64 %XAndY1206, 1
  %XXorY1208 = xor i64 %XXorY119, %shift1118
  %Result1209 = add nsw i64 %shift11207, %XXorY1208
  %XXorY = xor i64 %Result1209, %indvars.iv.i
  %XAndY903 = and i64 %shift1, %XXorY
  %shift1904 = shl i64 %XAndY903, 1
  %XXorY905 = xor i64 %shift1, %XXorY
  %Result906 = add i64 %shift1904, %XXorY905
  %arrayidx.i = getelementptr inbounds i8, i8* %2, i64 %Result906
  %37 = load i8, i8* %arrayidx.i, align 1, !tbaa !6
  %cmp.i = icmp eq i8 %37, 0
  br i1 %cmp.i, label %while.end.loopexit.i, label %while.body.i

while.end.loopexit.i:                             ; preds = %while.body.i
  %38 = sub i32 0, %argc
  %shift1229 = shl i32 %argc, 1
  %XXorY230 = xor i32 %argc, -1
  %XAndY1242 = and i32 %shift1229, %XXorY230
  %shift11243 = shl i32 %XAndY1242, 1
  %XXorY1244 = xor i32 %shift1229, %XXorY230
  %Result1245 = add i32 %shift11243, %XXorY1244
  %XAndY236 = and i32 %Result1245, %38
  %shift1237 = shl i32 %XAndY236, 1
  %XXorY238 = xor i32 %Result1245, %38
  %XAndY994 = and i32 %shift1237, %XXorY238
  %shift1995 = shl i32 %XAndY994, 1
  %XXorY996 = xor i32 %shift1237, %XXorY238
  %Result997 = add i32 %shift1995, %XXorY996
  %phitmp.i = xor i32 %xor8.7.i, %Result997
  br label %crc32.exit

crc32.exit:                                       ; preds = %while.end.loopexit.i, %if.end
  %crc.0.lcssa.i = phi i32 [ 0, %if.end ], [ %phitmp.i, %while.end.loopexit.i ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %crc.0.lcssa.i, i8* %2)
  br label %return

return:                                           ; preds = %crc32.exit, %if.then
  %retval.0 = phi i32 [ 1, %if.then ], [ 0, %crc32.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
declare dso_local i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
